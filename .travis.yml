---
sudo: required
dist: bionic
env:
  global:
  # auto vagrant installation
notifications:
  slack:
    on_failure: always


fleet_script_tasks : &fleet_script_tasks
      script:
        - python --version
fleet_install_tasks : &fleet_install_tasks
      install:
        - pip install -r requirements.txt


matrix:
  fast_finish: true
  include:


    #https://kubernetes.io/docs/setup/learning-environment/minikube/
    #https://kubernetes.io/docs/tasks/tools/install-minikube/
    #https://kubernetes.io/docs/tasks/tools/install-kubectl/#install-kubectl-on-linux
    - name: "minikube containerd as the container runtime,  Python 3.7 on bionic amd64"
      dist: bionic
      addons:
           snaps:
             - name: minikube
               confinement: strict
               channel: stable
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
      <<: *fleet_install_tasks
      <<: *fleet_script_tasks
      # <<: *fleet_script_minikube_latest_tasks
      script:
        - | #To check if virtualization is supported on Linux, run the following command and verify that the output is non-empty:
            set -eo pipefail #safety for script
            if [[ $(egrep -c '(vmx|svm)' /proc/cpuinfo) == 0 ]]; then #check if virtualization is supported on Linux, xenial fails w 0, bionic works w 2
                     echo "virtualization is not supported"
            else
                  echo "===================================="
                  echo eval "$(egrep -c '(vmx|svm)' /proc/cpuinfo)" 2>/dev/null
                  echo "===================================="
                  echo "virtualization is supported"
            fi
        - |
          curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl && \
          chmod +x ./kubectl && \
          sudo mv ./kubectl /usr/local/bin/kubectl &&
          kubectl version --client
        - | #Install Minikube via direct download,add the Minikube executable to the path
          curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 && \
          chmod +x minikube && \
          sudo mkdir -p /usr/local/bin/ && \
          sudo install minikube /usr/local/bin/
        - minikube version #minikube version: v1.11.0
        # - minikube config set driver podman #unknown command "config" for "minikube"
        # - docker pull gcr.io/k8s-minikube/kicbase:v0.0.10
        - | #Starting a cluster on alternative container runtimes,use the extended version with containerd
          minikube start \
          --network-plugin=cni \
          --enable-default-cni \
          --extra-config=kubelet.container-runtime=remote \
          --extra-config=kubelet.container-runtime-endpoint=unix:///run/containerd/containerd.sock \
          --extra-config=kubelet.image-service-endpoint=unix:///run/containerd/containerd.sock \
          --bootstrapper=kubeadm
        - echo "============================Waiting for Kubernetes to be ready========================================"
        - |
          echo "Waiting for Kubernetes to be ready ..."
          for i in {1..150}; do # Timeout after 2 minutes, 150x2=300 secs
            if kubectl get pods --namespace=kube-system |grep Running ; then
              break
            fi
            sleep 2
          done
        - echo "======================================================================================================="
        - echo "============================smoke tests=============================================================="
        - kubectl create deployment hello-minikube --image=k8s.gcr.io/echoserver:1.10 #create a Kubernetes Deployment using an existing image named echoserver, which is a simple HTTP server and expose it on port 8080 using --port.
        - kubectl expose deployment hello-minikube --type=NodePort --port=8080 #To access the hello-minikube Deployment, expose it as a Service,The option --type=NodePort specifies the type of the Service
        - kubectl get pod #Check if the Pod is up and running
        - minikube service hello-minikube --url #Get the URL of the exposed Service to view the Service details
        - kubectl delete services hello-minikube #Delete the hello-minikube Service
        - kubectl delete deployment hello-minikube #Delete the hello-minikube Deployment
        - echo "============================smoke tests=============================================================="
        - minikube stop #Stop the local Minikube cluster
        - minikube delete #Delete the local Minikube cluster

      after_success:
        - deactivate

    # https://kubernetes.io/docs/setup/learning-environment/minikube/
    #https://kubernetes.io/docs/tasks/tools/install-minikube/
    #https://kubernetes.io/docs/tasks/tools/install-kubectl/#install-kubectl-on-linux
    - name: "minikube CRI-O as the container runtime,  Python 3.7 on bionic amd64"
      dist: bionic
      addons:
           snaps:
             - name: minikube
               confinement: strict
               channel: stable
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
      <<: *fleet_install_tasks
      <<: *fleet_script_tasks
      # <<: *fleet_script_minikube_latest_tasks
      script:
        - | #To check if virtualization is supported on Linux, run the following command and verify that the output is non-empty:
            set -eo pipefail #safety for script
            if [[ $(egrep -c '(vmx|svm)' /proc/cpuinfo) == 0 ]]; then #check if virtualization is supported on Linux, xenial fails w 0, bionic works w 2
                     echo "virtualization is not supported"
            else
                  echo "===================================="
                  echo eval "$(egrep -c '(vmx|svm)' /proc/cpuinfo)" 2>/dev/null
                  echo "===================================="
                  echo "virtualization is supported"
            fi
        - |
          curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl && \
          chmod +x ./kubectl && \
          sudo mv ./kubectl /usr/local/bin/kubectl &&
          kubectl version --client
        - | #Install Minikube via direct download,add the Minikube executable to the path
          curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 && \
          chmod +x minikube && \
          sudo mkdir -p /usr/local/bin/ && \
          sudo install minikube /usr/local/bin/
        - minikube version #minikube version: v1.11.0
        # - sudo minikube start \
        #     --network-plugin=cni \
        #     --enable-default-cni \
        #     --container-runtime=cri-o \
        #     --bootstrapper=kubeadm
        #use the extended version
        # - docker pull gcr.io/k8s-minikube/kicbase:v0.0.10
        - minikube start \
                --network-plugin=cni \
                --enable-default-cni \
                --extra-config=kubelet.container-runtime=remote \
                --extra-config=kubelet.container-runtime-endpoint=/var/run/crio.sock \
                --extra-config=kubelet.image-service-endpoint=/var/run/crio.sock \
                --bootstrapper=kubeadm
        - echo "============================Waiting for Kubernetes to be ready========================================"
        - |
          echo "Waiting for Kubernetes to be ready ..."
          for i in {1..150}; do # Timeout after 2 minutes, 150x2=300 secs
            if kubectl get pods --namespace=kube-system |grep Running ; then
              break
            fi
            sleep 2
          done
        - echo "======================================================================================================="
        - echo "============================smoke tests=============================================================="
        - kubectl create deployment hello-minikube --image=k8s.gcr.io/echoserver:1.10 #create a Kubernetes Deployment using an existing image named echoserver, which is a simple HTTP server and expose it on port 8080 using --port.
        - kubectl expose deployment hello-minikube --type=NodePort --port=8080 #To access the hello-minikube Deployment, expose it as a Service,The option --type=NodePort specifies the type of the Service
        - kubectl get pod #Check if the Pod is up and running
        - minikube service hello-minikube --url #Get the URL of the exposed Service to view the Service details
        - kubectl delete services hello-minikube #Delete the hello-minikube Service
        - kubectl delete deployment hello-minikube #Delete the hello-minikube Deployment
        - echo "============================smoke tests=============================================================="
        - minikube stop #Stop the local Minikube cluster
        - minikube delete #Delete the local Minikube cluster

      after_success:
        - deactivate

    - name: "minikube docker as the container runtime,  Python 3.7 on bionic amd64"
      dist: bionic
      addons:
           snaps:
             - name: minikube
               confinement: strict
               channel: stable
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
      <<: *fleet_install_tasks
      <<: *fleet_script_tasks
      # <<: *fleet_script_minikube_latest_tasks
      script:
        - | #To check if virtualization is supported on Linux, run the following command and verify that the output is non-empty:
            set -eo pipefail #safety for script
            if [[ $(egrep -c '(vmx|svm)' /proc/cpuinfo) == 0 ]]; then #check if virtualization is supported on Linux, xenial fails w 0, bionic works w 2
                     echo "virtualization is not supported"
            else
                  echo "===================================="
                  echo eval "$(egrep -c '(vmx|svm)' /proc/cpuinfo)" 2>/dev/null
                  echo "===================================="
                  echo "virtualization is supported"
            fi
        - |
          curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl && \
          chmod +x ./kubectl && \
          sudo mv ./kubectl /usr/local/bin/kubectl &&
          kubectl version --client
        # - docker pull gcr.io/k8s-minikube/kicbase:v0.0.10
        - | #Install Minikube via direct download,add the Minikube executable to the path
          curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 && \
          chmod +x minikube && \
          sudo mkdir -p /usr/local/bin/ && \
          sudo install minikube /usr/local/bin/
        - minikube version #minikube version: v1.11.0
        - minikube start --driver=docker #No hypervisor required when run on Linux
        - echo "============================Waiting for Kubernetes to be ready========================================"
        - |
          echo "Waiting for Kubernetes to be ready ..."
          for i in {1..150}; do # Timeout after 2 minutes, 150x2=300 secs
            if kubectl get pods --namespace=kube-system |grep Running ; then
              break
            fi
            sleep 2
          done
        - echo "======================================================================================================="
        - echo "============================smoke tests=============================================================="
        - kubectl create deployment hello-minikube --image=k8s.gcr.io/echoserver:1.10 #create a Kubernetes Deployment using an existing image named echoserver, which is a simple HTTP server and expose it on port 8080 using --port.
        - kubectl expose deployment hello-minikube --type=NodePort --port=8080 #To access the hello-minikube Deployment, expose it as a Service,The option --type=NodePort specifies the type of the Service
        - kubectl get pod #Check if the Pod is up and running
        - minikube service hello-minikube --url #Get the URL of the exposed Service to view the Service details
        - kubectl delete services hello-minikube #Delete the hello-minikube Service
        - kubectl delete deployment hello-minikube #Delete the hello-minikube Deployment
        - echo "============================smoke tests=============================================================="
        - minikube stop #Stop the local Minikube cluster
        - minikube delete #Delete the local Minikube cluster

#   # =============================================macOS=============================================

    - name: "minikube kubectl Python 2.7.17 on macOS 10.15.4 osx xcode11.5"
      os: osx
      osx_image: xcode11.5
      language: shell
      addons:
        homebrew:
          packages:
            - kubectl #kubernetes-cli 1.18.3
            - minikube #minikube 1.11.0
          casks: # Installing Casks
            - podman
          update: true
      before_install:
        - pip install virtualenv
        - virtualenv -p $(which python2) ~venvpy2
        - source ~venvpy2/bin/activate
      <<: *fleet_install_tasks
      <<: *fleet_script_tasks
      script:
        - kubectl version --client
        - minikube version
        - brew cat kubectl
        - brew cat minikube
        - brew home kubectl
        - brew home minikube
        - brew info kubectl
        - brew info minikube
        # - brew doctor #Check system for potential problems
        - brew update #Update brew and cask
        - brew cask upgrade
        - brew cask info podman
      after_success:
        - brew uninstall kubectl minikube
        - brew cleanup kubectl minikube
        - brew cask uninstall --force podman
        - deactivate

 # =============================================windows=============================================

    - name: "kubectl minikube Python 3.8 on Windows"
      os: windows
      language: shell
      env:
        - PATH=/c/Python38:/c/Python38/Scripts:$PATH
      before_install:
        - choco install python --version 3.8.1
        - pip install virtualenv
        - virtualenv $HOME/venv
        - source $HOME/venv/Scripts/activate
      <<: *fleet_install_tasks
      <<: *fleet_script_tasks
      script:
        - choco install kubernetes-cli
        - choco install minikube
        # - minikube start --driver=none # The driver 'none' is not supported on windows
        # - minikube status
        - kubectl version --client
        # - set USERPROFILE #query the value of %USERPROFILE%
        # - set #see all currently defined environment variables    #USERPROFILE='C:\Users\travis'
        - echo cd %USERPROFILE% #when debugging a command
        - echo %cd% #print current path
        - echo mkdir %USERPROFILE%\.kube
        - mkdir %USERPROFILE%\.kube
        - echo cd %USERPROFILE%\.kube
        - cd %USERPROFILE%\.kube
        # - mkdir .kube
        # - cd .kube
        - cd #print current path
        # - New-Item config -type file #Configure kubectl to use a remote Kubernetes cluster:
      after_success:
        - deactivate
